{"version":3,"sources":["formatTime.js","time/Time.js","timeInput/TimeInput.js","warning/Warning.js","buttons/Button.js","App.js","serviceWorker.js","index.js"],"names":["secondsToMinutesMessage","time","seconds","parseInt","Math","floor","minutes","secondsToMinutes","props","hours","formatDisplayTime","timeInput","warningInput","showWarningInput","type","text","className","max","startingTime","min","onChange","changeTime","defaultValue","warning","firstWarning","secondWarning","message","button","onClick","handleClick","name","App","state","countdownTime","remainingTime","timeFlowing","this","timerID","setInterval","tick","clearInterval","setState","componentWillUnmount","componentDidMount","stopCountdown","startCountdown","e","inputTime","target","value","Time","Warning","TimeInput","handleTimeChange","handleFirstWarnings","handleSecondWarnings","Button","handlePause","handleStart","hanldeResetTime","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.57f7c20f.chunk.js","sourcesContent":["function secondsToMinutesMessage(time) {\r\n  let seconds = parseInt(time, 10);\r\n\r\n  var hours = Math.floor(seconds / 3600);\r\n  seconds -= hours * 3600;\r\n\r\n  let minutes = Math.floor(seconds / 60);\r\n  seconds -= minutes * 60;\r\n\r\n  if (seconds > 0) {\r\n    return `${minutes} minutes and ${seconds} seconds`;\r\n  }\r\n\r\n  return `${minutes} minutes`;\r\n}\r\n\r\n\r\nfunction secondsToMinutes(time) {\r\n  let seconds = parseInt(time, 10);\r\n\r\n  var hours = Math.floor(seconds / 3600);\r\n  seconds -= hours * 3600;\r\n\r\n  let minutes = Math.floor(seconds / 60);\r\n  seconds -= minutes * 60;\r\n\r\n  // console.log(minutes, seconds)\r\n  return minutes;\r\n}\r\n\r\nfunction formatDisplayTime(time) {\r\n  let seconds = parseInt(time, 10);\r\n\r\n  var hours = Math.floor(seconds / 3600);\r\n  seconds -= hours * 3600;\r\n\r\n  let minutes = Math.floor(seconds / 60);\r\n  seconds -= minutes * 60;\r\n\r\n  if (hours < 10) {\r\n    hours = '0' + hours\r\n  }\r\n\r\n  if (minutes < 10) {\r\n    minutes = '0' + minutes;\r\n  }\r\n\r\n  if (seconds < 10) {\r\n    seconds = '0' + seconds;\r\n  }\r\n  if (hours > 0) {\r\n    time = hours + ':' + minutes + ':' + seconds\r\n  } else {\r\n    time = minutes + \":\" + seconds;\r\n  }\r\n\r\n  return time;\r\n}\r\n\r\nexport {\r\n  secondsToMinutesMessage,\r\n  secondsToMinutes,\r\n  formatDisplayTime\r\n};","import React from 'react'\r\nimport { formatDisplayTime } from '../formatTime'\r\n\r\nconst time = (props) => {\r\n\r\n  let time = formatDisplayTime(props.time);\r\n\r\n  return (\r\n    <div>\r\n      <h1>{time}</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default time;\r\n","import React from 'react'\r\n\r\nimport { secondsToMinutes } from '../formatTime';\r\n\r\nconst timeInput = (props) => {\r\n  let warningInput = null;\r\n  if (props.showWarningInput) {\r\n    warningInput = <span>\r\n      Play audio warning.<input type=\"checkbox\"></input>\r\n    </span>\r\n  }\r\n\r\n  let text = props.text;\r\n  if (!text) {\r\n    text = \"Enter a warning time:\";\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n\r\n      <div className=\"col text-left\">\r\n        <p>{text}</p>\r\n      </div>\r\n\r\n      <div className=\"col text-right my-auto\">\r\n        <input className=\"text-center\"\r\n          max={props.startingTime}\r\n          min={0} type='number'\r\n          onChange={props.changeTime}\r\n          defaultValue={secondsToMinutes(props.startingTime)}\r\n        >\r\n        </input>\r\n      </div>\r\n      {warningInput}\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default timeInput\r\n","import React from 'react'\r\nimport { secondsToMinutesMessage } from '../formatTime';\r\n\r\n\r\nconst warning = (props) => {\r\n\r\n  let { time, firstWarning, secondWarning, startingTime } = props;\r\n\r\n  let message = 'Plenty of time, you got this.'\r\n  if (secondWarning >= startingTime) {\r\n    message = `Some of your warnings are invalid!`;\r\n  } else if (firstWarning >= startingTime) {\r\n    message = `Some of your warnings are invalid!`;\r\n  } else {\r\n\r\n    if (time <= firstWarning) {\r\n      message = `Less than ${secondsToMinutesMessage(firstWarning)}, nearly there!`;\r\n    }\r\n\r\n    if (time <= secondWarning) {\r\n      message = `Less than ${secondsToMinutesMessage(secondWarning)}, almost done!`;\r\n    }\r\n\r\n    if (time === 0) {\r\n      message = \"Time's up!\";\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>{message}</h3>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default warning;","import React from 'react'\r\n\r\nconst button = (props) => {\r\n  return (\r\n    <div>\r\n      <button className=\"btn btn-success btn-block\" onClick={props.handleClick}>{props.name}</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default button\r\n","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n\nimport Time from './time/Time';\nimport TimeInput from './timeInput/TimeInput';\nimport Warning from './warning/Warning';\nimport Button from './buttons/Button'\nimport { booleanTypeAnnotation } from '@babel/types';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Displays as the time to countdown for, passed in from props.\n      countdownTime: 600,\n      // The time remaining in the current countdown.\n      remainingTime: null,\n      timeFlowing: false,\n      firstWarning: null,\n      secondWarning: null\n    }\n  }\n\n  startCountdown() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n\n  stopCountdown() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    if (this.state.remainingTime > 0) {\n      this.setState((state, props) => {\n        return {\n          remainingTime: state.remainingTime -= 1\n        }\n      });\n    } else {\n      this.setState({\n        // reset to countdownTime\n        // remainingTime: this.state.countdownTime\n      })\n    }\n  }\n\n  handlePause() {\n    if (this.state.timeFlowing) {\n      this.componentWillUnmount();\n      this.setState((state) => ({\n        timeFlowing: !state.timeFlowing\n      }));\n    } else {\n      this.componentDidMount();\n      this.setState((state) => ({\n        timeFlowing: !state.timeFlowing\n      }))\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      remainingTime: this.state.countdownTime\n    })\n  }\n\n  componentWillUnmount() {\n    this.stopCountdown();\n  }\n\n  handleStart() {\n    if (!this.state.timeFlowing) {\n      this.setState({\n        timeFlowing: true\n      })\n    }\n    this.startCountdown();\n  }\n\n  hanldeResetTime() {\n    this.componentWillUnmount();\n    this.setState((state) => ({\n      timeFlowing: false,\n      countdownTime: state.countdownTime,\n      remainingTime: state.countdownTime\n    }));\n  }\n\n  handleTimeChange(e) {\n    this.stopCountdown();\n    // convert the input to what it would be in seconds for the minute value entered\n    let inputTime = e.target.value * 60;\n\n    this.setState({\n      timeFlowing: false,\n      countdownTime: inputTime,\n      remainingTime: inputTime\n    });\n  }\n\n  handleFirstWarnings(e) {\n    this.setState({\n      firstWarning: e.target.value * 60\n    });\n  }\n\n  handleSecondWarnings(e) {\n    this.setState({\n      secondWarning: e.target.value * 60\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App container\">\n        {/* <h1>Presentation timer</h1> */}\n\n        <div className=\"row time-area\">\n          <div className=\"col\">\n\n            <Time\n              time={this.state.remainingTime}\n            >\n            </Time>\n\n          </div>\n        </div>\n\n        <div className=\"row warning-area\">\n          <div className=\"col my-auto\">\n\n            <Warning\n              startingTime={this.state.countdownTime}\n              time={this.state.remainingTime}\n              firstWarning={this.state.firstWarning}\n              secondWarning={this.state.secondWarning}\n            >\n            </Warning>\n\n          </div>\n        </div>\n\n        <div className=\"row time-input\">\n          <div className=\"col\">\n\n            <TimeInput\n              startingTime={this.state.countdownTime}\n              text={\"Presentation time in minutes:\"}\n              changeTime={(e) => this.handleTimeChange(e)}\n              showWarningInput={false}\n            ></TimeInput>\n\n            <TimeInput\n              startingTime={Math.floor(this.state.countdownTime / 2)}\n              text={\"Warning time in minutes:\"}\n              changeTime={(e) => this.handleFirstWarnings(e)}\n              showWarningInput={false}\n            >\n            </TimeInput>\n\n            <TimeInput\n              startingTime={Math.floor(this.state.countdownTime / 4)}\n              text={\"Warning time in minutes:\"}\n              changeTime={(e) => this.handleSecondWarnings(e)}\n              showWarningInput={false}\n            >\n            </TimeInput>\n\n          </div>\n        </div>\n\n        <div className=\"row button-container\">\n          <div className=\"col\">\n\n            {this.state.timeFlowing ?\n              <Button handleClick={() => this.handlePause()} name={\"Pause\"}></Button> :\n              <Button handleClick={() => this.handleStart()} name={\"Start\"}></Button>}\n          </div>\n\n          <div className=\"col\">\n\n            <Button handleClick={() => this.hanldeResetTime()} name={\"Reset\"}></Button>\n\n          </div>\n\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}